{"version":3,"file":"static/webpack/static/development/pages/_app.js.9172d1be182124f0cb0e.hot-update.js","sources":["webpack:///./lib/redirect.ts","webpack:///./lib/withApollo.tsx","webpack:///./node_modules/next/router.js"],"sourcesContent":["import Router from \"next/router\";\n\nexport default (context: any, target: string) => {\n  if (context.res) {\n    context.res.writeHead(303, { location: target });\n    context.res.end();\n  } else {\n    Router.replace(target);\n  }\n};\n","import cookie from \"cookie\";\nimport Head from \"next/head\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { getDataFromTree } from \"react-apollo\";\nimport initApollo from \"./initApollo\";\nimport { isBrowser } from \"./isBrowser\";\nimport { ApolloClient, NormalizedCacheObject } from \"apollo-boost\";\nimport redirect from \"./redirect\";\n\nfunction parseCookies(req?: any, options = {}) {\n  return cookie.parse(\n    req ? req.headers.cookie || \"\" : document.cookie,\n    options\n  );\n}\n\nexport default (App: any) => {\n  return class WithData extends React.Component {\n    static displayName = `WithData(${App.displayName})`;\n    static propTypes = {\n      apolloState: PropTypes.object.isRequired\n    };\n\n    static async getInitialProps(ctx: any) {\n      const {\n        Component,\n        router,\n        ctx: { req, res }\n      } = ctx;\n\n      const apollo = initApollo({}, { getToken: () => parseCookies(req).qid });\n\n      ctx.ctx.apolloClient = apollo;\n\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx);\n      }\n\n      if (res && res.finished) {\n        return {};\n      }\n\n      if (!isBrowser) {\n        try {\n          await getDataFromTree(\n            <App\n              {...appProps}\n              Component={Component}\n              router={router}\n              apolloClient={apollo}\n            />\n          );\n        } catch (error) {\n          console.error(\"Error while running `getDataFromTree`\", error);\n          if (error.message.includes(\"not authenticated\")) {\n            redirect(ctx.ctx, \"/login\");\n          }\n        }\n\n        Head.rewind();\n      }\n\n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState\n      };\n    }\n\n    apolloClient: ApolloClient<NormalizedCacheObject>;\n\n    constructor(props: any) {\n      super(props);\n\n      this.apolloClient = initApollo(props.apolloState, {\n        getToken: () => {\n          return parseCookies().token;\n        }\n      });\n    }\n\n    render() {\n      return <App {...this.props} apolloClient={this.apolloClient} />;\n    }\n  };\n};\n","module.exports = require('./dist/lib/router')\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAQA;AAKA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAlBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAoBA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAgCA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA/BA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAsCA;AACA;AAAA;AACA;AACA;AACA;AA1CA;AA4CA;AACA;AA7CA;AA+CA;AA/CA;AAmDA;AAnDA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAwDA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAHA;AAQA;AACA;AAlEA;AAAA;AAAA;AAoEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AArEA;AACA;AADA;AAAA;AAGA;AADA;AAqEA;;;;;;;;;;;ACzFA;;;;;A","sourceRoot":""}